
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Given Test</title>


<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>

<script type="text/javascript">
    
    RegExp.prototype.replace = function (str, replacer, nonMatchedReplacer) {
        nonMatchedReplacer = nonMatchedReplacer || function (value) {
            return value
        };
        var result = [];

        var position = 0;
        var match;
        while ((match = this.exec(str)) != null) {
            result.push(nonMatchedReplacer(str.substring(position, match.index)));
            result.push(replacer(match));
            position = this.lastIndex;
        }
        result.push(nonMatchedReplacer(str.substring(position)));

        return result.join("");
    }

    function yatspec() {
    }

    yatspec.processed = 'highlighted';

    yatspec.highlight = function (element, pairs) {
        if (pairs.length == 0) {
            return;
        }

        if ($(element).hasClass(yatspec.processed)) {
            return;
        }

        var classes = [];
        var matchGroups = [];
        $.each(pairs, function () {
            matchGroups.push("(", this.pattern, ")", "|");
            classes.push(this.cssClass);
        });
        matchGroups.pop();
        var regex = new RegExp(matchGroups.join(""), "g");

        $(element).html(regex.replace($(element).html(), function (match) {
            var matches = match.slice(1);
            for (var i = 0; i < matches.length; i++) {
                if (matches[i]) {
                    return '<span class="' + classes[i] + '">' + matches[i] + '</span>'
                }
            }
        }));

        $(element).addClass(yatspec.processed);
    }

    $(document).ready(function () {
        $('.highlight.specification').each(function () {
            yatspec.highlight(this, [
                {pattern: '"[^"]*"', cssClass: "quote"},
                {pattern: "Given", cssClass: "keyword"},
                {pattern: "And", cssClass: "keyword"},
                {pattern: "When", cssClass: "keyword"},
                {pattern: "Then", cssClass: "keyword"},
                {pattern: "[A-Z_]{2,}", cssClass: "constant"},
                {pattern: "[\\d]+", cssClass: "literal"}
            ]);
        })

        $('.highlight.results').each(function () {
            yatspec.highlight(this, [
                {pattern: '"[^"]*"', cssClass: "quote"},
                {pattern: "Expected", cssClass: "keyword"},
                {pattern: "got", cssClass: "keyword"},
                {pattern: "[A-Z_]{2,}", cssClass: "constant"},
                {pattern: "[\\d]+", cssClass: "literal"}
            ]);
        })

        $('.scenario').each(function () {
            var interestingGivens = $('.interestingGiven', this).filter(':not(:empty)').map(function () {
                return [
                    {pattern: '"' + $(this).text() + '"', cssClass: "interestingGiven"},
                    {pattern: '\\b' + $(this).text() + '\\b', cssClass: "interestingGiven"},
                ];
            }).get();

            $('.logKey', this).click(function () {
                $(this).next(".logValue").toggleClass("hide");
            });

            $('.logKey', this).each(function () {
                $(this).next('.logValue.highlight.xml').each(function () {
                    if (this.children.length == 0 || this.children[0].tagName.toLowerCase() != "svg") {
                        yatspec.highlight(this, interestingGivens.concat([
                            {pattern: '"[^"]*"', cssClass: "quote"},
                            {pattern: "&lt;[^\\s&]+", cssClass: "keyword"},
                            {pattern: "\\??&gt;", cssClass: "keyword"},
                            {pattern: "\\s[\\w:-]+=", cssClass: "constant"}
                        ]));
                    }
                })
            });

            $('.logKey', this).next(".logValue").toggleClass("hide");
        })

    }, false);

    
</script>



<style type="text/css">
     
    html, body {
        margin: 1em 2ex 2em;
        padding: 0;
        background-color: #fff;
        color: #000;
        font-family: Arial, Helvetica, Verdana, sans-serif;
        font-size: 10pt;
    }

    h1, h2, h3, h4, h5, h6, th {
        text-transform: capitalize;
    }

    h1 {
        font-size: 170%;
    }

    h2 {
        font-size: 150%;
    }

    h3 {
        font-size: 140%;
    }

    h4 {
        font-size: 130%;
    }

    h5 {
        font-size: 120%;
    }

    h6 {
        font-size: 110%;
    }

    .highlight {
        background-color: #E8EEF7;
        border: 1px solid #C3D9FF;
        padding: 5px;
        font: 10pt Arial, sans-serif;
    }

    .highlight .literal {
        color: #066;
    }

    .highlight .keyword {
        color: #008;
    }

    .highlight .constant {
        color: #606;
    }

    .highlight .quote {
        color: #080;
    }

    .highlight.specification .literal,
    .highlight.specification .keyword,
    .highlight.specification .constant,
    .highlight.specification .quote {
        font-weight: bold;
    }

    pre.test-not-run, .test-not-run, .interestingGiven {
        background-color: #FFF4CC;
        border: 2px solid #FFBB66;
    }

    .interestingGiven {
        padding: 0 2px;
    }

    pre.test-failed, .test-failed {
        background-color: #FFF6FF;
        border: 2px solid #FDA8A8;
    }

    pre.test-passed, .test-passed {
        background-color: #F2FFEE;
        border: 2px solid #A5DDAD;
    }

    li.test-not-run, li.test-passed {
        border: none;
    }

    ul.contents a {
        text-transform: capitalize;
    }

    a, table a {
        color: #660066;
        text-decoration: none;
    }

    a:hover, table a:hover {
        text-decoration: underline;
    }

    table {
        background-color: #F5F9FD;
        border: 1px solid #C3D9FF;
        border-collapse: collapse;
        empty-cells: show;
    }

    th {
        background-color: #E8EEF7;
        border: 1px solid #C3D9FF;
    }

    td {
        border: 1px solid #C3D9FF;
    }

    div.contents, div.testmethod {
        margin-bottom: 40px;
    }

    .scenarios td {
        padding: 0 20px;
        text-align: center;
    }

    .scenarios, .scenario {
        margin-bottom: 20px;
    }

    .scenario {
        background-color: #F5F9FD;
        border: 1px solid #C3D9FF;
        padding: 0 10px;
    }

    h2 {
        margin-top: 10px;
    }

    pre {
        margin-bottom: 32px;
    }

    div.example {
        margin-bottom: 64px;
    }

    .hide {
        display: none;
    }

    .logKey {
        cursor: pointer;
    }

    .logKey:hover {
        text-decoration: underline;
    }

    .interestingGivens th {
        text-align: left;
    }

    .interestingGivens td {
        text-align: right;
        padding: 0 5px;
        vertical-align: middle;
    }

    .xml {
        white-space: pre-wrap;
        margin-bottom: 32px;
    }

     
</style>


</head>
<body>

<h1>Given Test</h1>


<div class="contents">
    <h2>Contents</h2>

    <ul class="contents">
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestGivenWhenExercisingRanges">e</a></li>
    
    
    
        <li class='test-failed'><a href="#github.com%2fcorbym%2fgogiven_test.TestGivenWhenExercisingRanges_1">e</a></li>
    
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestGivenWhenSetsInterestingGiven">Given When Sets Interesting Given</a></li>
    
    
    
        <li class='test-not-run'><a href="#github.com%2fcorbym%2fgogiven_test.TestGivenWhenSkips">test</a></li>
    
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestGivenWhenStacksGivens">Given When Stacks Givens</a></li>
    
    
    
        <li class='test-failed'><a href="#github.com%2fcorbym%2fgogiven_test.TestGoGivenFailsInMetaData">Go Given Fails In Meta Data</a></li>
    
    
    
        <li class='test-failed'><a href="#github.com%2fcorbym%2fgogiven_test.TestGoGivenLogsWithMetaData">Go Given Logs With Meta Data</a></li>
    
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestInnerTestRangesOverValues.func1">Inner Test Ranges Over Values / n</a></li>
    
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestInnerTestRangesOverValues.func1_1">Inner Test Ranges Over Values / aa</a></li>
    
    
    </ul>
</div>




<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestGivenWhenExercisingRanges"></a>
    <h2>e</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestGivenWhenExercisingRanges">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given testing t
        Some = append some given
        Given when
        Actual &#34;value&#34; = test actual
        Actual &#34;expected&#34; = test expected
        Then
        Noting that do assertions
        Test meta data = append test meta data t * base test meta data
        Assert that t test actual has length test expected
        Assert that testing some 0 captured io &#34;value&#34; is equal to &#34;&#34;
        Assert that testing some 0 captured io &#34;expected&#34; is equal to 0
        Assert that testing some 1 captured io &#34;value&#34; is equal to &#34;a&#34;
        Assert that testing some 1 captured io &#34;expected&#34; is equal to 2
        Assert that testing test meta data 0 failed is equal to false
        Assert that testing test meta data 1 failed is equal to true</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
</table>


    


<h3 class="logKey" logkey="value">value</h3>
<div class="logValue highlight xml WebResource"></div>

<h3 class="logKey" logkey="expected">expected</h3>
<div class="logValue highlight xml WebResource">0</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestGivenWhenExercisingRanges_1"></a>
    <h2>e</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestGivenWhenExercisingRanges_1">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given testing t
        Some = append some given
        Given when
        Actual &#34;value&#34; = test actual
        Actual &#34;expected&#34; = test expected
        Then
        Noting that do assertions
        Test meta data = append test meta data t * base test meta data
        Assert that t test actual has length test expected
        Assert that testing some 0 captured io &#34;value&#34; is equal to &#34;&#34;
        Assert that testing some 0 captured io &#34;expected&#34; is equal to 0
        Assert that testing some 1 captured io &#34;value&#34; is equal to &#34;a&#34;
        Assert that testing some 1 captured io &#34;expected&#34; is equal to 2
        Assert that testing test meta data 0 failed is equal to false
        Assert that testing test meta data 1 failed is equal to true</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-failed'>TEST FAILED
        
Expected: value with length 2
     but: &lt;length was 1&gt;
</pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
</table>


    


<h3 class="logKey" logkey="value">value</h3>
<div class="logValue highlight xml WebResource">a</div>

<h3 class="logKey" logkey="expected">expected</h3>
<div class="logValue highlight xml WebResource">2</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestGivenWhenSetsInterestingGiven"></a>
    <h2>Given When Sets Interesting Given</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestGivenWhenSetsInterestingGiven">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given testing some data setup
        When some action
        Then
        Noting that do assertions
        Assert that t actual &#34;foo&#34; is equal to &#34;foob&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">1</th>
        <td class="interestingGiven">hi</td>
    </tr>
    
    <tr>
        <th class="key">2</th>
        <td class="interestingGiven">foo</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="foo">foo</h3>
<div class="logValue highlight xml WebResource">foob</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestGivenWhenSkips"></a>
    <h2>test</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestGivenWhenSkips">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given t some data setup and more data setup
        Skipping this one &#34;some reason&#34;
        When some action
        Then
        Noting that do assertions
        Assert that testing t skipped is equal to true
        Assert that testing t test output is equal to &#34;some reason&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-not-run'>TEST SKIPPED
        some reason</pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">2</th>
        <td class="interestingGiven">foo</td>
    </tr>
    
    <tr>
        <th class="key">blarg</th>
        <td class="interestingGiven">12</td>
    </tr>
    
    <tr>
        <th class="key">1</th>
        <td class="interestingGiven">hi</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="foo">foo</h3>
<div class="logValue highlight xml WebResource">foob</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestGivenWhenStacksGivens"></a>
    <h2>Given When Stacks Givens</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestGivenWhenStacksGivens">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given testing some data setup and more data setup
        When some action
        Then
        Noting that do assertions
        Assert that testing givens has all keys &#34;1&#34; &#34;2&#34; &#34;blarg&#34;
        Assert that testing givens is value containing &#34;hi&#34; 12 &#34;foo&#34;
        Assert that testing actual has key &#34;foo&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">1</th>
        <td class="interestingGiven">hi</td>
    </tr>
    
    <tr>
        <th class="key">2</th>
        <td class="interestingGiven">foo</td>
    </tr>
    
    <tr>
        <th class="key">blarg</th>
        <td class="interestingGiven">12</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="foo">foo</h3>
<div class="logValue highlight xml WebResource">foob</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestGoGivenFailsInMetaData"></a>
    <h2>Go Given Fails In Meta Data</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestGoGivenFailsInMetaData">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given stub testing t
        Then
        Testing t fail now
        Assert that t stub testing t failed is equal to true</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-failed'>TEST FAILED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
</table>


    



    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestGoGivenLogsWithMetaData"></a>
    <h2>Go Given Logs With Meta Data</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestGoGivenLogsWithMetaData">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given stub testing t
        Then
        Testing t logf &#34;wobble bop&#34;
        Assert that t stub testing t failed is equal to true
        Assert that t stub testing t test output is equal to &#34;wobble bop&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-failed'>TEST FAILED
        wobble bop</pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
</table>


    



    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestInnerTestRangesOverValues.func1"></a>
    <h2>Inner Test Ranges Over Values / n</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestInnerTestRangesOverValues.func1">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given t inner given some stuffs &#34;a&#34;
        When
        Givens &#34;value&#34; = test value
        Givens &#34;expected&#34; = test expected
        Captured io &#34;actual&#34; = len test value
        Then
        Assert that testing t actual &#34;actual&#34; is equal to test expected</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">value</th>
        <td class="interestingGiven">n</td>
    </tr>
    
    <tr>
        <th class="key">expected</th>
        <td class="interestingGiven">1</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="actual">actual</h3>
<div class="logValue highlight xml WebResource">1</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestInnerTestRangesOverValues.func1_1"></a>
    <h2>Inner Test Ranges Over Values / aa</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestInnerTestRangesOverValues.func1_1">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given t inner given some stuffs &#34;a&#34;
        When
        Givens &#34;value&#34; = test value
        Givens &#34;expected&#34; = test expected
        Captured io &#34;actual&#34; = len test value
        Then
        Assert that testing t actual &#34;actual&#34; is equal to test expected</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">value</th>
        <td class="interestingGiven">aa</td>
    </tr>
    
    <tr>
        <th class="key">expected</th>
        <td class="interestingGiven">2</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="actual">actual</h3>
<div class="logValue highlight xml WebResource">2</div>


    </div>
</div>



</body>
</html>
