
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Example Test</title>


<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>

<script type="text/javascript">
    
    RegExp.prototype.replace = function (str, replacer, nonMatchedReplacer) {
        nonMatchedReplacer = nonMatchedReplacer || function (value) {
            return value
        };
        var result = [];

        var position = 0;
        var match;
        while ((match = this.exec(str)) != null) {
            result.push(nonMatchedReplacer(str.substring(position, match.index)));
            result.push(replacer(match));
            position = this.lastIndex;
        }
        result.push(nonMatchedReplacer(str.substring(position)));

        return result.join("");
    }

    function yatspec() {
    }

    yatspec.processed = 'highlighted';

    yatspec.highlight = function (element, pairs) {
        if (pairs.length == 0) {
            return;
        }

        if ($(element).hasClass(yatspec.processed)) {
            return;
        }

        var classes = [];
        var matchGroups = [];
        $.each(pairs, function () {
            matchGroups.push("(", this.pattern, ")", "|");
            classes.push(this.cssClass);
        });
        matchGroups.pop();
        var regex = new RegExp(matchGroups.join(""), "g");

        $(element).html(regex.replace($(element).html(), function (match) {
            var matches = match.slice(1);
            for (var i = 0; i < matches.length; i++) {
                if (matches[i]) {
                    return '<span class="' + classes[i] + '">' + matches[i] + '</span>'
                }
            }
        }));

        $(element).addClass(yatspec.processed);
    }

    $(document).ready(function () {
        $('.highlight.specification').each(function () {
            yatspec.highlight(this, [
                {pattern: '"[^"]*"', cssClass: "quote"},
                {pattern: "Given", cssClass: "keyword"},
                {pattern: "And", cssClass: "keyword"},
                {pattern: "When", cssClass: "keyword"},
                {pattern: "Then", cssClass: "keyword"},
                {pattern: "[A-Z_]{2,}", cssClass: "constant"},
                {pattern: "[\\d]+", cssClass: "literal"}
            ]);
        })

        $('.highlight.results').each(function () {
            yatspec.highlight(this, [
                {pattern: '"[^"]*"', cssClass: "quote"},
                {pattern: "Expected", cssClass: "keyword"},
                {pattern: "got", cssClass: "keyword"},
                {pattern: "[A-Z_]{2,}", cssClass: "constant"},
                {pattern: "[\\d]+", cssClass: "literal"}
            ]);
        })

        $('.scenario').each(function () {
            var interestingGivens = $('.interestingGiven', this).filter(':not(:empty)').map(function () {
                return [
                    {pattern: '"' + $(this).text() + '"', cssClass: "interestingGiven"},
                    {pattern: '\\b' + $(this).text() + '\\b', cssClass: "interestingGiven"},
                ];
            }).get();

            $('.logKey', this).click(function () {
                $(this).next(".logValue").toggleClass("hide");
            });

            $('.logKey', this).each(function () {
                $(this).next('.logValue.highlight.xml').each(function () {
                    if (this.children.length == 0 || this.children[0].tagName.toLowerCase() != "svg") {
                        yatspec.highlight(this, interestingGivens.concat([
                            {pattern: '"[^"]*"', cssClass: "quote"},
                            {pattern: "&lt;[^\\s&]+", cssClass: "keyword"},
                            {pattern: "\\??&gt;", cssClass: "keyword"},
                            {pattern: "\\s[\\w:-]+=", cssClass: "constant"}
                        ]));
                    }
                })
            });

            $('.logKey', this).next(".logValue").toggleClass("hide");
        })

    }, false);

    
</script>



<style type="text/css">
     
    html, body {
        margin: 1em 2ex 2em;
        padding: 0;
        background-color: #fff;
        color: #000;
        font-family: Arial, Helvetica, Verdana, sans-serif;
        font-size: 10pt;
    }

    h1, h2, h3, h4, h5, h6, th {
        text-transform: capitalize;
    }

    h1 {
        font-size: 170%;
    }

    h2 {
        font-size: 150%;
    }

    h3 {
        font-size: 140%;
    }

    h4 {
        font-size: 130%;
    }

    h5 {
        font-size: 120%;
    }

    h6 {
        font-size: 110%;
    }

    .highlight {
        background-color: #E8EEF7;
        border: 1px solid #C3D9FF;
        padding: 5px;
        font: 10pt Arial, sans-serif;
    }

    .highlight .literal {
        color: #066;
    }

    .highlight .keyword {
        color: #008;
    }

    .highlight .constant {
        color: #606;
    }

    .highlight .quote {
        color: #080;
    }

    .highlight.specification .literal,
    .highlight.specification .keyword,
    .highlight.specification .constant,
    .highlight.specification .quote {
        font-weight: bold;
    }

    pre.test-not-run, .test-not-run, .interestingGiven {
        background-color: #FFF4CC;
        border: 2px solid #FFBB66;
    }

    .interestingGiven {
        padding: 0 2px;
    }

    pre.test-failed, .test-failed {
        background-color: #FFF6FF;
        border: 2px solid #FDA8A8;
    }

    pre.test-passed, .test-passed {
        background-color: #F2FFEE;
        border: 2px solid #A5DDAD;
    }

    li.test-not-run, li.test-passed {
        border: none;
    }

    ul.contents a {
        text-transform: capitalize;
    }

    a, table a {
        color: #660066;
        text-decoration: none;
    }

    a:hover, table a:hover {
        text-decoration: underline;
    }

    table {
        background-color: #F5F9FD;
        border: 1px solid #C3D9FF;
        border-collapse: collapse;
        empty-cells: show;
    }

    th {
        background-color: #E8EEF7;
        border: 1px solid #C3D9FF;
    }

    td {
        border: 1px solid #C3D9FF;
    }

    div.contents, div.testmethod {
        margin-bottom: 40px;
    }

    .scenarios td {
        padding: 0 20px;
        text-align: center;
    }

    .scenarios, .scenario {
        margin-bottom: 20px;
    }

    .scenario {
        background-color: #F5F9FD;
        border: 1px solid #C3D9FF;
        padding: 0 10px;
    }

    h2 {
        margin-top: 10px;
    }

    pre {
        margin-bottom: 32px;
    }

    div.example {
        margin-bottom: 64px;
    }

    .hide {
        display: none;
    }

    .logKey {
        cursor: pointer;
    }

    .logKey:hover {
        text-decoration: underline;
    }

    .interestingGivens th {
        text-align: left;
    }

    .interestingGivens td {
        text-align: right;
        padding: 0 5px;
        vertical-align: middle;
    }

    .xml {
        white-space: pre-wrap;
        margin-bottom: 32px;
    }

     
</style>


</head>
<body>

<h1>Example Test</h1>


<div class="contents">
    <h2>Contents</h2>

    <ul class="contents">
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestMyFirst">My First</a></li>
    
    
    
        <li class='test-failed'><a href="#github.com%2fcorbym%2fgogiven_test.TestMyFirst_Ranged.func1">My First   Ranged</a></li>
    
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestMyFirst_Ranged.func1_1">My First   Ranged</a></li>
    
    
    
        <li class='test-not-run'><a href="#github.com%2fcorbym%2fgogiven_test.TestMyFirst_Skipped.func1">My First   Skipped / fff</a></li>
    
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestMyFirst_Skipped.func1_1">My First   Skipped / a</a></li>
    
    
    
        <li class='test-passed'><a href="#github.com%2fcorbym%2fgogiven_test.TestWithoutGiven">Without Given</a></li>
    
    
    </ul>
</div>




<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestMyFirst"></a>
    <h2>My First</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestMyFirst">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given testing the system setup
        When something happens
        Then noting that passed in testing should be used for assertions
        Noting that we do some assertions here commenting why
        Assert that testing the data returned &#34;actual&#34; is equal to &#34;some output&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">foofar</th>
        <td class="interestingGiven">faff</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="actual">actual</h3>
<div class="logValue highlight xml WebResource">some output</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestMyFirst_Ranged.func1"></a>
    <h2>My First   Ranged</h2>
    <p>This test tests over a range of values. Lorum ipsum dolor, lorum ipsum dolor lorum ipsum dolor. Lorum ipsum dolor.</p><p>Comments on new lines will be split into paragraph sections.</p><p></p><p>Empty lines will be removed. Do not remove this comment. Thanks.</p><p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestMyFirst_Ranged.func1">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given we are testing the system setup with test data test
        When something happens with the test
        Then
        Noting that do assertions
        Assert that with the stored &#34;actual&#34; has length test expected</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-failed'>TEST FAILED
        
Expected: value with length 2
     but: &lt;length was 1&gt;
</pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">foofar</th>
        <td class="interestingGiven">faff</td>
    </tr>
    
    <tr>
        <th class="key">actual</th>
        <td class="interestingGiven">x</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="x">x</h3>
<div class="logValue highlight xml WebResource">2</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestMyFirst_Ranged.func1_1"></a>
    <h2>My First   Ranged</h2>
    <p>This test tests over a range of values. Lorum ipsum dolor, lorum ipsum dolor lorum ipsum dolor. Lorum ipsum dolor.</p><p>Comments on new lines will be split into paragraph sections.</p><p></p><p>Empty lines will be removed. Do not remove this comment. Thanks.</p><p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestMyFirst_Ranged.func1_1">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given we are testing the system setup with test data test
        When something happens with the test
        Then
        Noting that do assertions
        Assert that with the stored &#34;actual&#34; has length test expected</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">foofar</th>
        <td class="interestingGiven">faff</td>
    </tr>
    
    <tr>
        <th class="key">actual</th>
        <td class="interestingGiven">aaaa</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="aaaa">aaaa</h3>
<div class="logValue highlight xml WebResource">4</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestMyFirst_Skipped.func1"></a>
    <h2>My First   Skipped / fff</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestMyFirst_Skipped.func1">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given we are testing the system setup that is a bit dodgy to test
        Skipping this one if the value is fff test &#34;some data % s does not work yet&#34; test actual
        When something happens with the test
        Then
        Assert that t test actual is equal to &#34;a&#34; reason &#34;we only want to assert if test actual is a not empty&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-not-run'>TEST SKIPPED
        some data fff does not work yet</pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">foofar</th>
        <td class="interestingGiven">faff</td>
    </tr>
    
    <tr>
        <th class="key">actual</th>
        <td class="interestingGiven">fff</td>
    </tr>
    
</table>


    



    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestMyFirst_Skipped.func1_1"></a>
    <h2>My First   Skipped / a</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestMyFirst_Skipped.func1_1">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        Given we are testing the system setup that is a bit dodgy to test
        Skipping this one if the value is fff test &#34;some data % s does not work yet&#34; test actual
        When something happens with the test
        Then
        Assert that t test actual is equal to &#34;a&#34; reason &#34;we only want to assert if test actual is a not empty&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
    <tr>
        <th class="key">foofar</th>
        <td class="interestingGiven">faff</td>
    </tr>
    
    <tr>
        <th class="key">actual</th>
        <td class="interestingGiven">a</td>
    </tr>
    
</table>


    


<h3 class="logKey" logkey="a">a</h3>
<div class="logValue highlight xml WebResource">1</div>


    </div>
</div>

<div class="testmethod">
    <a id="github.com/corbym/gogiven_test.TestWithoutGiven"></a>
    <h2>Without Given</h2>
    <p></p>
    <div class="scenario" id="scenario_github.com/corbym/gogiven_test.TestWithoutGiven">
        <a id=""></a>
        <h2>Specification</h2>

        <pre class="highlight specification">
        When t something happens
        Then
        Assert that testing actual &#34;actual&#34; is equal to &#34;some output&#34;</pre>

        <h2>Test results:</h2>

    
        <pre class='highlight results test-passed'>TEST PASSED
        </pre>
    
    

<h3 class="logKey">Interesting Givens</h3>

<table class="interestingGivens logValue">
    
</table>


    


<h3 class="logKey" logkey="actual">actual</h3>
<div class="logValue highlight xml WebResource">some output</div>


    </div>
</div>



</body>
</html>
